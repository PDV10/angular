----------------------------------------------------------------------------------------------------------------------------------

                                                        DEPENDENCIAS

----------------------------------------------------------------------------------------------------------------------------------

cuando clonamos un repo es necesario instalar las dependencias de forma manual, para ello se ejecuta el siguiente comando\

npm install 
 
o la version corta

npm i 


-----------------------------------------------------------------------------------------------------------------------------------

                                                           INTERFACES

-----------------------------------------------------------------------------------------------------------------------------------
Definir una interface

para esto dentro del componente creamos un archivo con el nombre que le pongamos a la interface.ts
y dentro definir la interface con los valores 

ej : Beer.ts

export interface Beer{
	name: string;
	style: string;
	price: number;
	stock: number;
	type: string;

}

con export lo que hacemos es declararlo de manera publica lo que va a permitir que se pueda usar en otras partes de la app

y para usarlo hay que importar la interface en el componente 
import {nombre de la interface} from "la url de la interface "
y tambien hay que tipear el atributo del componente que usemos con el nombre de tipo de la interface  :

let beer: Beer = {
name: "lala",
style: "pepe",
price: 1000,
stock: 100,
type: "zz",
}

mock: es un objeto que simula la informacion que se va a mostrar
para esto podemos usar un arreglo donde creamos 3 objetos a base de test y en el futuro usar la informacion real
a modo de vista previa ej:

beers: Beer[] = {
 {
	name: 'asd',
	price: 120,
	stock: 5,
 },
 { 
	name: 'asd',
	price: 120,
	stock: 5,
 },
 {
	name: 'asd',
	price: 120,
	stock: 5,
 },

}
---------------------------------------------------------------------------------------------------------------------------

								DIRECTIVAS 

---------------------------------------------------------------------------------------------------------------------------


directiva: es una forma para generar templates dinamicos en html, comportamiento relacionado con lo visual
las directivas van siempre adentro del elemento como si fuera un atributo mas 

2 tipos:
-directivas estructurales: modifican en layout agregando, quitando o modificando elementos del html
-directivas de atributo: modifica la apariencia y comportamiento de elementos que ya existen  

directiva for en angular :

----------
- *ngFor
----------

para esto usamos la directiva *ngfor lo que hace es repetir un elemento tantas veces como exista en una coleccion (arreglo por ejemplo)

ejemplo: 
<tr *ngFor="let beer of beers">
	<td>{{beer.name}}</td>   (dentro de las llaves se pone el nombre del elemento que pusimos en el ngFor
	<td>{{beer.price}}</td>   		seguido de un . y el nombre del atributo que querramos)
	<td>{{beer.stock}}</td>
</tr>

directiva if en angular :  

----------
- *ngIf
----------

Mostrar un cartel de sin stock en caso de que stock sea 0 
para esto usamos *ngIf en alguna columna td, y esta solo se va a mostrar en caso de que la sentencia definidad en el if se cumpla
 
ejemplo: 
<tr *ngFor="let beer of beers">
	<td>{{beer.name}}</td>   (dentro de las llaves se pone el nombre del elemento que pusimos en el ngFor
	<td>{{beer.price}}</td>   		seguido de un . y el nombre del atributo que querramos)
	<td>{{beer.stock}}</td>
	<td ><span *ngIf="beer.stock == 0">  Sin Stock :( </span></td>
</tr>



directiva de atributo 

---------
[ngClass]
---------

esta directiva manipula las clases css de un elemento html

se pone en lugar del class y se escribe entre corchetes [ngClass]
[ngClass]="{'nombre de la clase': "condicion para que se cumpla"}

ejemplo: 										   (se debe haber creado la clase Oferta en css previamente)
<tr *ngFor="let beer of beers" [ngClass]="{'Oferta': beer.enOferta}> (beer.enOferta debe ser booleano, si esta en true se ejecuta y sino no como si fuera un if)
	<td>{{beer.name}}</td>
	<td>{{beer.price}}</td>   		
	<td>{{beer.stock}}</td>
</tr>



------------------------------------------------------------------------------------------------------------------------------------
								 	PIPES
------------------------------------------------------------------------------------------------------------------------------------
 
esta es otra forma para transformar y hacer un poco mas dinamicos los templates en angular

son simples funciones que transforman valores directamente en el template 

como en la mayoria de lengujages se usa el | para referirnos a un pipe

hay muchos tipos de pipe y cada uno sirve para algo especifico

para usarlos se escriben | "nombre del pipe a usar" inmediatamente despues de una variable/atributo

al ser funciones, estos pueden recibir parametros y modificar su uso a gusto 

se pueden concatenar escribiendo un pipe al lado del otro separados por | entre cada uno

en la documentancion de angular estan todos donde se explica la funcionalidad de cada uno 

| uppercase ----> pasa a mayuscula texto por ejemplo

ej: 

<tr *ngFor="let beer of beers" [ngClass]="{'Oferta': beer.enOferta}>
	<td>{{beer.name}}</td>
	<td>{{beer.price | currency}}</td> (el pipe currency transforma la forma en que se ven los valores relacionados con dinero)   		
	<td>{{beer.stock}}</td>			(agrega el $ adelente del numero, y tambien agrega 2 decimales despues del valor )
</tr>								(ej: 200 ------> $200.00)
