event binding es la forma de comunicar lo que pasa en html a js (escuchar los eventos que realiza el usuario)
	- click del mouse
	- hover etc.

dentro de los elementos podemos usar eventos para llamar la typeScript (ts)
encerramos los eventos entre ("evento") de esta forma le indicamos a ts que lo estamos llamando 
y despues des los parentecis entre comillas ponemos el nombre del metodo que vamos a utilizar y le podemos pasar parametros 

no es una mala practica usar ts in line en este caso ya que realmente no lo estamos haciendo en un html sino que 
lo estamos haciendo en un template el cual angular va a compilar por nosotros 
ej: 

<buttom class="btn" (click)="aumentarCant(beer)" > click </buttom>

como "aumentarCant" no existe la tenemos que declarar en el archivo ts del componente 

ej:
nombre del metodo("nombre del parametro": "tipo del parametro"): "forma de retorno"{
	"funcionalidad"
};

aumentarCant(beer: Beer): void{
    if(beer.cantidad < beer.stock)	
	beer.cantidad++; (aumenta en 1 la cantidad cada vez que se apreta el boton de +)
};

disminuirCant(beer: Beer): void{
   if(beer.cantidad > 0)
	beer.cantidad--; (disminuye en 1 la cantidad cada vez que se apreta el boton de +)
};


----------------------------------------------------------------------------------------------------------------------------------------------

two way data binding (cajitas con bananas [()] )

permite compartir informacion entre el componente y el template en ambas direcciones 

tanto el template como el componente se mantienen incronizados constantemente

------------------
para poder usarlo:
------------------

en el archivo module.ts de la app hay que importar FormsModule para luego poder usarlo en html

import { FormsModule} from '@angular/forms';

y en la parte  de imports agregamos FormsModule, 


-----------------------
para hacer uso en html
-----------------------
dentro de la cajita de banana escribimos ngModel
 

ej: 

 [(ngModel)]="beer.cantidad" 

y de esta forma logramos tener tanto al componente como al template comunicados constantemente 

(un caso de uso es cuando queremos modificar el value de un input y que ts reconozca los cambios y logre actualizarse correctamente)